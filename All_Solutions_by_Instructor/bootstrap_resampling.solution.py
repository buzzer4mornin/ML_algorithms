#!/usr/bin/env python3
import argparse

import numpy as np

import sklearn.datasets
import sklearn.linear_model
import sklearn.metrics
import sklearn.model_selection
import sklearn.pipeline
import sklearn.preprocessing

parser = argparse.ArgumentParser()
# These arguments will be set appropriately by ReCodEx, even if you change them.
parser.add_argument("--bootstrap_samples", default=1000, type=int, help="Bootstrap resamplings")
parser.add_argument("--classes", default=10, type=int, help="Number of classes")
parser.add_argument("--plot", default=False, const=True, nargs="?", type=str, help="Plot the predictions")
parser.add_argument("--recodex", default=False, action="store_true", help="Running in ReCodEx")
parser.add_argument("--seed", default=42, type=int, help="Random seed")
parser.add_argument("--test_size", default=0.5, type=lambda x:int(x) if x.isdigit() else float(x), help="Test set size")
# If you add more arguments, ReCodEx will keep them with your default values.

def main(args):
    # Create a random generator with a given seed
    generator = np.random.RandomState(args.seed)

    # Load the digits dataset
    data = sklearn.datasets.load_digits(n_class=args.classes)

    # Split the data randomly to train and test using `sklearn.model_selection.train_test_split`,
    # with `test_size=args.test_size` and `random_state=args.seed`.
    train_data, test_data, train_target, test_target = sklearn.model_selection.train_test_split(
        data.data, data.target, test_size=args.test_size, random_state=args.seed)

    # Train a simple linear regression model with polynomial features of order 1 and 2.
    models = []
    for d in [1, 2]:
        models.append(sklearn.pipeline.Pipeline([
            ("features", sklearn.preprocessing.PolynomialFeatures(degree=d)),
            ("estimator", sklearn.linear_model.LogisticRegression(max_iter=2000, random_state=args.seed)),
        ]))
        models[-1].fit(train_data, train_target)

    # TODO: Compute the accuracies of the two models using data generated by
    # bootstrap resampling.
    #
    # Namely, generate `args.boostrap_samples` test sets of the size `len(test_data)`
    # by sampling from `test_data` and `test_target`, using the following indices:
    #   indices = generator.choice(len(test_data), size=len(test_data), replace=True)
    #
    # Store the accuraccies in percents of the individual models on these test
    # sets into the `scores` array of shape `[2, args.bootstrap_samples]`.
    scores = [[] for model in models]
    predictions = [model.predict(test_data) for model in models]
    for i in range(args.bootstrap_samples):
        indices = generator.choice(len(test_data), size=len(test_data), replace=True)
        for prediction, score in zip(predictions, scores):
            score.append(100 * np.mean(test_target[indices] == prediction[indices]))
    scores = np.array(scores)

    # TODO: Compute the 95% confidence intervals of the two model scores into
    # `confidence_intervals`. Use `np.percentile` to compute percentiles.
    confidence_intervals = [
        (np.percentile(score, 2.5), np.percentile(score, 97.5)) for score in scores
    ]

    # TODO: Perform the bootstrap paired model test of the alternative hypothesis
    # that `models[1]` is better than `models[0]` (our null hypothesis is
    # that `models[0]` is better or equal to `models[1]`).
    #
    # Notably, compute the p-value as the ratio of the model score differences
    # which are less or equal to zero. Store it in `p_value` as a percentage.
    p_value = 100 * np.mean(scores[1] - scores[0] <= 0)

    # Plot the histograms, confidence intervals and the p-value if requested.
    if args.plot:
        import matplotlib.pyplot as plt
        def histogram(ax, data, color=None):
            ax.hist(data, int(round((np.max(data) - np.min(data)) * len(test_data) / 100)) + 1,
                    weights=100 * np.ones_like(data) / len(data), color=color)

        plt.figure(figsize=(12, 5))
        ax = plt.subplot(121)
        for score, confidence_interval, color in zip(scores, confidence_intervals, ["#d00", "#0d0"]):
            histogram(ax, score, color + "8")
            ax.axvline(np.mean(score), ls="-", color=color, label="mean: {:.1f}%".format(np.mean(score)))
            ax.axvline(confidence_interval[0], ls="--", color=color, label="95% CI")
            ax.axvline(confidence_interval[1], ls="--", color=color)
        ax.set_xlabel("Model accuracy")
        ax.set_ylabel("Frequency [%]")
        ax.legend()

        ax = plt.subplot(122)
        histogram(ax, scores[1] - scores[0])
        for percentile in [1, 2.5, 5, 25, 50, 75, 95, 97.5, 99]:
            value = np.percentile(scores[1] - scores[0], percentile)
            color = {1: "#f00", 2.5: "#d60", 5: "#dd0", 25: "#0f0", 50: "#000"}[min(percentile, 100 - percentile)]
            ax.axvline(value, ls="--", color=color, label="{:04.1f}%: {:.1f}".format(percentile, value))
        ax.axvline(0, ls="--", color="#f0f", label="{:04.1f}%: 0.0".format(p_value))
        ax.set_xlabel("Model accuracy difference")
        ax.set_ylabel("Frequency [%]")
        ax.legend()
        if args.plot is True: plt.show()
        else: plt.savefig(args.plot, transparent=True, bbox_inches="tight", pad_inches=0)

    return confidence_intervals, p_value

if __name__ == "__main__":
    args = parser.parse_args([] if "__file__" not in globals() else None)
    confidence_intervals, p_value = main(args)
    print("Confidence intervals of the two models:")
    for confidence_interval in confidence_intervals:
        print("- [{:.2f}% .. {:.2f}%]".format(*confidence_interval))
    print("The p-value of the test: {:.2f}%".format(p_value))